"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/w3c-xmlserializer@5.0.0";
exports.ids = ["vendor-chunks/w3c-xmlserializer@5.0.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/attributes.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/attributes.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst xnv = __webpack_require__(/*! xml-name-validator */ \"(ssr)/./node_modules/.pnpm/xml-name-validator@5.0.0/node_modules/xml-name-validator/lib/xml-name-validator.js\");\n\nconst { NAMESPACES } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/constants.js\");\n\nfunction generatePrefix(map, newNamespace, prefixIndex) {\n  const generatedPrefix = `ns${prefixIndex}`;\n  map[newNamespace] = [generatedPrefix];\n  return generatedPrefix;\n}\n\nfunction preferredPrefixString(map, ns, preferredPrefix) {\n  const candidateList = map[ns];\n  if (!candidateList) {\n    return null;\n  }\n  if (candidateList.includes(preferredPrefix)) {\n    return preferredPrefix;\n  }\n  return candidateList[candidateList.length - 1];\n}\n\nfunction serializeAttributeValue(value/* , requireWellFormed*/) {\n  if (value === null) {\n    return \"\";\n  }\n  // TODO: Check well-formedness\n  return value\n    .replace(/&/ug, \"&amp;\")\n    .replace(/\"/ug, \"&quot;\")\n    .replace(/</ug, \"&lt;\")\n    .replace(/>/ug, \"&gt;\")\n    .replace(/\\t/ug, \"&#x9;\")\n    .replace(/\\n/ug, \"&#xA;\")\n    .replace(/\\r/ug, \"&#xD;\");\n}\n\nfunction serializeAttributes(\n  element,\n  map,\n  localPrefixes,\n  ignoreNamespaceDefAttr,\n  requireWellFormed,\n  refs\n) {\n  let result = \"\";\n  const namespaceLocalnames = Object.create(null);\n  for (const attr of element.attributes) {\n    if (\n      requireWellFormed &&\n      namespaceLocalnames[attr.namespaceURI] &&\n      namespaceLocalnames[attr.namespaceURI].has(attr.localName)\n    ) {\n      throw new Error(\"Found duplicated attribute\");\n    }\n    if (!namespaceLocalnames[attr.namespaceURI]) {\n      namespaceLocalnames[attr.namespaceURI] = new Set();\n    }\n    namespaceLocalnames[attr.namespaceURI].add(attr.localName);\n    const attributeNamespace = attr.namespaceURI;\n    let candidatePrefix = null;\n    if (attributeNamespace !== null) {\n      candidatePrefix = preferredPrefixString(\n        map,\n        attributeNamespace,\n        attr.prefix\n      );\n      if (attributeNamespace === NAMESPACES.XMLNS) {\n        if (\n          attr.value === NAMESPACES.XML ||\n          (attr.prefix === null && ignoreNamespaceDefAttr) ||\n          (attr.prefix !== null &&\n            localPrefixes[attr.localName] !== attr.value &&\n            map[attr.value].includes(attr.localName))\n        ) {\n          continue;\n        }\n        if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\n          throw new Error(\n            \"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\"\n          );\n        }\n        if (requireWellFormed && attr.value === \"\") {\n          throw new Error(\n            \"Namespace prefix declarations cannot be used to undeclare a namespace\"\n          );\n        }\n        if (attr.prefix === \"xmlns\") {\n          candidatePrefix = \"xmlns\";\n        }\n      } else if (candidatePrefix === null) {\n        candidatePrefix = generatePrefix(\n          map,\n          attributeNamespace,\n          refs.prefixIndex++\n        );\n        result += ` xmlns:${candidatePrefix}=\"${serializeAttributeValue(\n          attributeNamespace,\n          requireWellFormed\n        )}\"`;\n      }\n    }\n\n    result += \" \";\n    if (candidatePrefix !== null) {\n      result += `${candidatePrefix}:`;\n    }\n    if (\n      requireWellFormed &&\n      (attr.localName.includes(\":\") ||\n        !xnv.name(attr.localName) ||\n        (attr.localName === \"xmlns\" && attributeNamespace === null))\n    ) {\n      throw new Error(\"Invalid attribute localName value\");\n    }\n    result += `${attr.localName}=\"${serializeAttributeValue(attr.value, requireWellFormed)}\"`;\n  }\n  return result;\n}\n\nmodule.exports.preferredPrefixString = preferredPrefixString;\nmodule.exports.generatePrefix = generatePrefix;\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\nmodule.exports.serializeAttributes = serializeAttributes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vdzNjLXhtbHNlcmlhbGl6ZXJANS4wLjAvbm9kZV9tb2R1bGVzL3czYy14bWxzZXJpYWxpemVyL2xpYi9hdHRyaWJ1dGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyx5SUFBb0I7O0FBRXhDLFFBQVEsYUFBYSxFQUFFLG1CQUFPLENBQUMsdUhBQWE7O0FBRTVDO0FBQ0EsK0JBQStCLFlBQVk7QUFDM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCLElBQUk7QUFDaEQ7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixlQUFlLElBQUksdURBQXVEO0FBQzNGO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEMsNkJBQTZCO0FBQzdCLHNDQUFzQztBQUN0QyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYW5nY2hhaW4tbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3czYy14bWxzZXJpYWxpemVyQDUuMC4wL25vZGVfbW9kdWxlcy93M2MteG1sc2VyaWFsaXplci9saWIvYXR0cmlidXRlcy5qcz9kNzY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB4bnYgPSByZXF1aXJlKFwieG1sLW5hbWUtdmFsaWRhdG9yXCIpO1xuXG5jb25zdCB7IE5BTUVTUEFDRVMgfSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVQcmVmaXgobWFwLCBuZXdOYW1lc3BhY2UsIHByZWZpeEluZGV4KSB7XG4gIGNvbnN0IGdlbmVyYXRlZFByZWZpeCA9IGBucyR7cHJlZml4SW5kZXh9YDtcbiAgbWFwW25ld05hbWVzcGFjZV0gPSBbZ2VuZXJhdGVkUHJlZml4XTtcbiAgcmV0dXJuIGdlbmVyYXRlZFByZWZpeDtcbn1cblxuZnVuY3Rpb24gcHJlZmVycmVkUHJlZml4U3RyaW5nKG1hcCwgbnMsIHByZWZlcnJlZFByZWZpeCkge1xuICBjb25zdCBjYW5kaWRhdGVMaXN0ID0gbWFwW25zXTtcbiAgaWYgKCFjYW5kaWRhdGVMaXN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGNhbmRpZGF0ZUxpc3QuaW5jbHVkZXMocHJlZmVycmVkUHJlZml4KSkge1xuICAgIHJldHVybiBwcmVmZXJyZWRQcmVmaXg7XG4gIH1cbiAgcmV0dXJuIGNhbmRpZGF0ZUxpc3RbY2FuZGlkYXRlTGlzdC5sZW5ndGggLSAxXTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplQXR0cmlidXRlVmFsdWUodmFsdWUvKiAsIHJlcXVpcmVXZWxsRm9ybWVkKi8pIHtcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgLy8gVE9ETzogQ2hlY2sgd2VsbC1mb3JtZWRuZXNzXG4gIHJldHVybiB2YWx1ZVxuICAgIC5yZXBsYWNlKC8mL3VnLCBcIiZhbXA7XCIpXG4gICAgLnJlcGxhY2UoL1wiL3VnLCBcIiZxdW90O1wiKVxuICAgIC5yZXBsYWNlKC88L3VnLCBcIiZsdDtcIilcbiAgICAucmVwbGFjZSgvPi91ZywgXCImZ3Q7XCIpXG4gICAgLnJlcGxhY2UoL1xcdC91ZywgXCImI3g5O1wiKVxuICAgIC5yZXBsYWNlKC9cXG4vdWcsIFwiJiN4QTtcIilcbiAgICAucmVwbGFjZSgvXFxyL3VnLCBcIiYjeEQ7XCIpO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVBdHRyaWJ1dGVzKFxuICBlbGVtZW50LFxuICBtYXAsXG4gIGxvY2FsUHJlZml4ZXMsXG4gIGlnbm9yZU5hbWVzcGFjZURlZkF0dHIsXG4gIHJlcXVpcmVXZWxsRm9ybWVkLFxuICByZWZzXG4pIHtcbiAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gIGNvbnN0IG5hbWVzcGFjZUxvY2FsbmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBmb3IgKGNvbnN0IGF0dHIgb2YgZWxlbWVudC5hdHRyaWJ1dGVzKSB7XG4gICAgaWYgKFxuICAgICAgcmVxdWlyZVdlbGxGb3JtZWQgJiZcbiAgICAgIG5hbWVzcGFjZUxvY2FsbmFtZXNbYXR0ci5uYW1lc3BhY2VVUkldICYmXG4gICAgICBuYW1lc3BhY2VMb2NhbG5hbWVzW2F0dHIubmFtZXNwYWNlVVJJXS5oYXMoYXR0ci5sb2NhbE5hbWUpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGb3VuZCBkdXBsaWNhdGVkIGF0dHJpYnV0ZVwiKTtcbiAgICB9XG4gICAgaWYgKCFuYW1lc3BhY2VMb2NhbG5hbWVzW2F0dHIubmFtZXNwYWNlVVJJXSkge1xuICAgICAgbmFtZXNwYWNlTG9jYWxuYW1lc1thdHRyLm5hbWVzcGFjZVVSSV0gPSBuZXcgU2V0KCk7XG4gICAgfVxuICAgIG5hbWVzcGFjZUxvY2FsbmFtZXNbYXR0ci5uYW1lc3BhY2VVUkldLmFkZChhdHRyLmxvY2FsTmFtZSk7XG4gICAgY29uc3QgYXR0cmlidXRlTmFtZXNwYWNlID0gYXR0ci5uYW1lc3BhY2VVUkk7XG4gICAgbGV0IGNhbmRpZGF0ZVByZWZpeCA9IG51bGw7XG4gICAgaWYgKGF0dHJpYnV0ZU5hbWVzcGFjZSAhPT0gbnVsbCkge1xuICAgICAgY2FuZGlkYXRlUHJlZml4ID0gcHJlZmVycmVkUHJlZml4U3RyaW5nKFxuICAgICAgICBtYXAsXG4gICAgICAgIGF0dHJpYnV0ZU5hbWVzcGFjZSxcbiAgICAgICAgYXR0ci5wcmVmaXhcbiAgICAgICk7XG4gICAgICBpZiAoYXR0cmlidXRlTmFtZXNwYWNlID09PSBOQU1FU1BBQ0VTLlhNTE5TKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBhdHRyLnZhbHVlID09PSBOQU1FU1BBQ0VTLlhNTCB8fFxuICAgICAgICAgIChhdHRyLnByZWZpeCA9PT0gbnVsbCAmJiBpZ25vcmVOYW1lc3BhY2VEZWZBdHRyKSB8fFxuICAgICAgICAgIChhdHRyLnByZWZpeCAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgbG9jYWxQcmVmaXhlc1thdHRyLmxvY2FsTmFtZV0gIT09IGF0dHIudmFsdWUgJiZcbiAgICAgICAgICAgIG1hcFthdHRyLnZhbHVlXS5pbmNsdWRlcyhhdHRyLmxvY2FsTmFtZSkpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXF1aXJlV2VsbEZvcm1lZCAmJiBhdHRyLnZhbHVlID09PSBOQU1FU1BBQ0VTLlhNTE5TKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgXCJUaGUgWE1MTlMgbmFtZXNwYWNlIGlzIHJlc2VydmVkIGFuZCBjYW5ub3QgYmUgYXBwbGllZCBhcyBhbiBlbGVtZW50J3MgbmFtZXNwYWNlIHZpYSBYTUwgcGFyc2luZ1wiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVxdWlyZVdlbGxGb3JtZWQgJiYgYXR0ci52YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiTmFtZXNwYWNlIHByZWZpeCBkZWNsYXJhdGlvbnMgY2Fubm90IGJlIHVzZWQgdG8gdW5kZWNsYXJlIGEgbmFtZXNwYWNlXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRyLnByZWZpeCA9PT0gXCJ4bWxuc1wiKSB7XG4gICAgICAgICAgY2FuZGlkYXRlUHJlZml4ID0gXCJ4bWxuc1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNhbmRpZGF0ZVByZWZpeCA9PT0gbnVsbCkge1xuICAgICAgICBjYW5kaWRhdGVQcmVmaXggPSBnZW5lcmF0ZVByZWZpeChcbiAgICAgICAgICBtYXAsXG4gICAgICAgICAgYXR0cmlidXRlTmFtZXNwYWNlLFxuICAgICAgICAgIHJlZnMucHJlZml4SW5kZXgrK1xuICAgICAgICApO1xuICAgICAgICByZXN1bHQgKz0gYCB4bWxuczoke2NhbmRpZGF0ZVByZWZpeH09XCIke3NlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlKFxuICAgICAgICAgIGF0dHJpYnV0ZU5hbWVzcGFjZSxcbiAgICAgICAgICByZXF1aXJlV2VsbEZvcm1lZFxuICAgICAgICApfVwiYDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bHQgKz0gXCIgXCI7XG4gICAgaWYgKGNhbmRpZGF0ZVByZWZpeCAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0ICs9IGAke2NhbmRpZGF0ZVByZWZpeH06YDtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgcmVxdWlyZVdlbGxGb3JtZWQgJiZcbiAgICAgIChhdHRyLmxvY2FsTmFtZS5pbmNsdWRlcyhcIjpcIikgfHxcbiAgICAgICAgIXhudi5uYW1lKGF0dHIubG9jYWxOYW1lKSB8fFxuICAgICAgICAoYXR0ci5sb2NhbE5hbWUgPT09IFwieG1sbnNcIiAmJiBhdHRyaWJ1dGVOYW1lc3BhY2UgPT09IG51bGwpKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhdHRyaWJ1dGUgbG9jYWxOYW1lIHZhbHVlXCIpO1xuICAgIH1cbiAgICByZXN1bHQgKz0gYCR7YXR0ci5sb2NhbE5hbWV9PVwiJHtzZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZShhdHRyLnZhbHVlLCByZXF1aXJlV2VsbEZvcm1lZCl9XCJgO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzLnByZWZlcnJlZFByZWZpeFN0cmluZyA9IHByZWZlcnJlZFByZWZpeFN0cmluZztcbm1vZHVsZS5leHBvcnRzLmdlbmVyYXRlUHJlZml4ID0gZ2VuZXJhdGVQcmVmaXg7XG5tb2R1bGUuZXhwb3J0cy5zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZSA9IHNlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlO1xubW9kdWxlLmV4cG9ydHMuc2VyaWFsaXplQXR0cmlidXRlcyA9IHNlcmlhbGl6ZUF0dHJpYnV0ZXM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/attributes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/constants.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/constants.js ***!
  \****************************************************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports.NAMESPACES = {\n  HTML: \"http://www.w3.org/1999/xhtml\",\n  XML: \"http://www.w3.org/XML/1998/namespace\",\n  XMLNS: \"http://www.w3.org/2000/xmlns/\"\n};\n\nmodule.exports.NODE_TYPES = {\n  ELEMENT_NODE: 1,\n  ATTRIBUTE_NODE: 2, // historical\n  TEXT_NODE: 3,\n  CDATA_SECTION_NODE: 4,\n  ENTITY_REFERENCE_NODE: 5, // historical\n  ENTITY_NODE: 6, // historical\n  PROCESSING_INSTRUCTION_NODE: 7,\n  COMMENT_NODE: 8,\n  DOCUMENT_NODE: 9,\n  DOCUMENT_TYPE_NODE: 10,\n  DOCUMENT_FRAGMENT_NODE: 11,\n  NOTATION_NODE: 12 // historical\n};\n\nmodule.exports.VOID_ELEMENTS = new Set([\n  \"area\",\n  \"base\",\n  \"basefont\",\n  \"bgsound\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"frame\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"keygen\",\n  \"link\",\n  \"menuitem\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\"\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vdzNjLXhtbHNlcmlhbGl6ZXJANS4wLjAvbm9kZV9tb2R1bGVzL3czYy14bWxzZXJpYWxpemVyL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmdjaGFpbi1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdzNjLXhtbHNlcmlhbGl6ZXJANS4wLjAvbm9kZV9tb2R1bGVzL3czYy14bWxzZXJpYWxpemVyL2xpYi9jb25zdGFudHMuanM/MGFiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMuTkFNRVNQQUNFUyA9IHtcbiAgSFRNTDogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXG4gIFhNTDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgWE1MTlM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxufTtcblxubW9kdWxlLmV4cG9ydHMuTk9ERV9UWVBFUyA9IHtcbiAgRUxFTUVOVF9OT0RFOiAxLFxuICBBVFRSSUJVVEVfTk9ERTogMiwgLy8gaGlzdG9yaWNhbFxuICBURVhUX05PREU6IDMsXG4gIENEQVRBX1NFQ1RJT05fTk9ERTogNCxcbiAgRU5USVRZX1JFRkVSRU5DRV9OT0RFOiA1LCAvLyBoaXN0b3JpY2FsXG4gIEVOVElUWV9OT0RFOiA2LCAvLyBoaXN0b3JpY2FsXG4gIFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERTogNyxcbiAgQ09NTUVOVF9OT0RFOiA4LFxuICBET0NVTUVOVF9OT0RFOiA5LFxuICBET0NVTUVOVF9UWVBFX05PREU6IDEwLFxuICBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOiAxMSxcbiAgTk9UQVRJT05fTk9ERTogMTIgLy8gaGlzdG9yaWNhbFxufTtcblxubW9kdWxlLmV4cG9ydHMuVk9JRF9FTEVNRU5UUyA9IG5ldyBTZXQoW1xuICBcImFyZWFcIixcbiAgXCJiYXNlXCIsXG4gIFwiYmFzZWZvbnRcIixcbiAgXCJiZ3NvdW5kXCIsXG4gIFwiYnJcIixcbiAgXCJjb2xcIixcbiAgXCJlbWJlZFwiLFxuICBcImZyYW1lXCIsXG4gIFwiaHJcIixcbiAgXCJpbWdcIixcbiAgXCJpbnB1dFwiLFxuICBcImtleWdlblwiLFxuICBcImxpbmtcIixcbiAgXCJtZW51aXRlbVwiLFxuICBcIm1ldGFcIixcbiAgXCJwYXJhbVwiLFxuICBcInNvdXJjZVwiLFxuICBcInRyYWNrXCIsXG4gIFwid2JyXCJcbl0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/serialize.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/serialize.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst xnv = __webpack_require__(/*! xml-name-validator */ \"(ssr)/./node_modules/.pnpm/xml-name-validator@5.0.0/node_modules/xml-name-validator/lib/xml-name-validator.js\");\n\nconst attributeUtils = __webpack_require__(/*! ./attributes */ \"(ssr)/./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/attributes.js\");\nconst { NAMESPACES, VOID_ELEMENTS, NODE_TYPES } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/constants.js\");\n\nconst XML_CHAR = /^(\\x09|\\x0A|\\x0D|[\\x20-\\uD7FF]|[\\uE000-\\uFFFD]|[\\u{10000}-\\u{10FFFF}])*$/u;\nconst PUBID_CHAR = /^(\\x20|\\x0D|\\x0A|[a-zA-Z0-9]|[-'()+,./:=?;!*#@$_%])*$/u;\n\nfunction asciiCaseInsensitiveMatch(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; ++i) {\n    if ((a.charCodeAt(i) | 32) !== (b.charCodeAt(i) | 32)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction recordNamespaceInformation(element, map, prefixMap) {\n  let defaultNamespaceAttrValue = null;\n  for (let i = 0; i < element.attributes.length; ++i) {\n    const attr = element.attributes[i];\n    if (attr.namespaceURI === NAMESPACES.XMLNS) {\n      if (attr.prefix === null) {\n        defaultNamespaceAttrValue = attr.value;\n        continue;\n      }\n      let namespaceDefinition = attr.value;\n      if (namespaceDefinition === NAMESPACES.XML) {\n        continue;\n      }\n      // This is exactly the other way than the spec says, but that's intended.\n      // All the maps coalesce null to the empty string (explained in the\n      // spec), so instead of doing that every time, just do it once here.\n      if (namespaceDefinition === null) {\n        namespaceDefinition = \"\";\n      }\n\n      if (\n        namespaceDefinition in map &&\n        map[namespaceDefinition].includes(attr.localName)\n      ) {\n        continue;\n      }\n      if (!(namespaceDefinition in map)) {\n        map[namespaceDefinition] = [];\n      }\n      map[namespaceDefinition].push(attr.localName);\n      prefixMap[attr.localName] = namespaceDefinition;\n    }\n  }\n  return defaultNamespaceAttrValue;\n}\n\nfunction serializeDocumentType(node, namespace, prefixMap, requireWellFormed) {\n  if (requireWellFormed && !PUBID_CHAR.test(node.publicId)) {\n    throw new Error(\"Failed to serialize XML: document type node publicId is not well-formed.\");\n  }\n\n  if (\n    requireWellFormed &&\n    (!XML_CHAR.test(node.systemId) ||\n      (node.systemId.includes('\"') && node.systemId.includes(\"'\")))\n  ) {\n    throw new Error(\"Failed to serialize XML: document type node systemId is not well-formed.\");\n  }\n\n  let markup = `<!DOCTYPE ${node.name}`;\n  if (node.publicId !== \"\") {\n    markup += ` PUBLIC \"${node.publicId}\"`;\n  } else if (node.systemId !== \"\") {\n    markup += \" SYSTEM\";\n  }\n  if (node.systemId !== \"\") {\n    markup += ` \"${node.systemId}\"`;\n  }\n  return `${markup}>`;\n}\n\nfunction serializeProcessingInstruction(\n  node,\n  namespace,\n  prefixMap,\n  requireWellFormed\n) {\n  if (\n    requireWellFormed &&\n    (node.target.includes(\":\") || asciiCaseInsensitiveMatch(node.target, \"xml\"))\n  ) {\n    throw new Error(\"Failed to serialize XML: processing instruction node target is not well-formed.\");\n  }\n  if (\n    requireWellFormed &&\n    (!XML_CHAR.test(node.data) || node.data.includes(\"?>\"))\n  ) {\n    throw new Error(\"Failed to serialize XML: processing instruction node data is not well-formed.\");\n  }\n  return `<?${node.target} ${node.data}?>`;\n}\n\nfunction serializeDocument(\n  node,\n  namespace,\n  prefixMap,\n  requireWellFormed,\n  refs\n) {\n  if (requireWellFormed && node.documentElement === null) {\n    throw new Error(\"Failed to serialize XML: document does not have a document element.\");\n  }\n  let serializedDocument = \"\";\n  for (const child of node.childNodes) {\n    serializedDocument += xmlSerialization(\n      child,\n      namespace,\n      prefixMap,\n      requireWellFormed,\n      refs\n    );\n  }\n  return serializedDocument;\n}\n\nfunction serializeDocumentFragment(\n  node,\n  namespace,\n  prefixMap,\n  requireWellFormed,\n  refs\n) {\n  let markup = \"\";\n  for (const child of node.childNodes) {\n    markup += xmlSerialization(\n      child,\n      namespace,\n      prefixMap,\n      requireWellFormed,\n      refs\n    );\n  }\n  return markup;\n}\n\nfunction serializeText(node, namespace, prefixMap, requireWellFormed) {\n  if (requireWellFormed && !XML_CHAR.test(node.data)) {\n    throw new Error(\"Failed to serialize XML: text node data is not well-formed.\");\n  }\n\n  return node.data\n    .replace(/&/ug, \"&amp;\")\n    .replace(/</ug, \"&lt;\")\n    .replace(/>/ug, \"&gt;\");\n}\n\nfunction serializeComment(node, namespace, prefixMap, requireWellFormed) {\n  if (requireWellFormed && !XML_CHAR.test(node.data)) {\n    throw new Error(\"Failed to serialize XML: comment node data is not well-formed.\");\n  }\n\n  if (\n    requireWellFormed &&\n    (node.data.includes(\"--\") || node.data.endsWith(\"-\"))\n  ) {\n    throw new Error(\"Failed to serialize XML: found hyphens in illegal places in comment node data.\");\n  }\n  return `<!--${node.data}-->`;\n}\n\nfunction serializeElement(node, namespace, prefixMap, requireWellFormed, refs) {\n  if (\n    requireWellFormed &&\n    (node.localName.includes(\":\") || !xnv.name(node.localName))\n  ) {\n    throw new Error(\"Failed to serialize XML: element node localName is not a valid XML name.\");\n  }\n  let markup = \"<\";\n  let qualifiedName = \"\";\n  let skipEndTag = false;\n  let ignoreNamespaceDefinitionAttr = false;\n  const map = { ...prefixMap };\n  const localPrefixesMap = Object.create(null);\n  const localDefaultNamespace = recordNamespaceInformation(\n    node,\n    map,\n    localPrefixesMap\n  );\n  let inheritedNs = namespace;\n  const ns = node.namespaceURI;\n  if (inheritedNs === ns) {\n    if (localDefaultNamespace !== null) {\n      ignoreNamespaceDefinitionAttr = true;\n    }\n    if (ns === NAMESPACES.XML) {\n      qualifiedName = `xml:${node.localName}`;\n    } else {\n      qualifiedName = node.localName;\n    }\n    markup += qualifiedName;\n  } else {\n    let { prefix } = node;\n    let candidatePrefix = attributeUtils.preferredPrefixString(map, ns, prefix);\n    if (prefix === \"xmlns\") {\n      if (requireWellFormed) {\n        throw new Error(\"Failed to serialize XML: element nodes can't have a prefix of \\\"xmlns\\\".\");\n      }\n      candidatePrefix = \"xmlns\";\n    }\n    if (candidatePrefix !== null) {\n      qualifiedName = `${candidatePrefix}:${node.localName}`;\n      if (\n        localDefaultNamespace !== null &&\n        localDefaultNamespace !== NAMESPACES.XML\n      ) {\n        inheritedNs =\n          localDefaultNamespace === \"\" ? null : localDefaultNamespace;\n      }\n      markup += qualifiedName;\n    } else if (prefix !== null) {\n      if (prefix in localPrefixesMap) {\n        prefix = attributeUtils.generatePrefix(map, ns, refs.prefixIndex++);\n      }\n      if (map[ns]) {\n        map[ns].push(prefix);\n      } else {\n        map[ns] = [prefix];\n      }\n      qualifiedName = `${prefix}:${node.localName}`;\n      markup += `${qualifiedName} xmlns:${prefix}=\"${attributeUtils.serializeAttributeValue(ns, requireWellFormed)}\"`;\n      if (localDefaultNamespace !== null) {\n        inheritedNs =\n          localDefaultNamespace === \"\" ? null : localDefaultNamespace;\n      }\n    } else if (localDefaultNamespace === null || localDefaultNamespace !== ns) {\n      ignoreNamespaceDefinitionAttr = true;\n      qualifiedName = node.localName;\n      inheritedNs = ns;\n      markup += `${qualifiedName} xmlns=\"${attributeUtils.serializeAttributeValue(ns, requireWellFormed)}\"`;\n    } else {\n      qualifiedName = node.localName;\n      inheritedNs = ns;\n      markup += qualifiedName;\n    }\n  }\n\n  markup += attributeUtils.serializeAttributes(\n    node,\n    map,\n    localPrefixesMap,\n    ignoreNamespaceDefinitionAttr,\n    requireWellFormed,\n    refs\n  );\n\n  if (\n    ns === NAMESPACES.HTML &&\n    node.childNodes.length === 0 &&\n    VOID_ELEMENTS.has(node.localName)\n  ) {\n    markup += \" /\";\n    skipEndTag = true;\n  } else if (ns !== NAMESPACES.HTML && node.childNodes.length === 0) {\n    markup += \"/\";\n    skipEndTag = true;\n  }\n  markup += \">\";\n  if (skipEndTag) {\n    return markup;\n  }\n\n  if (ns === NAMESPACES.HTML && node.localName === \"template\") {\n    markup += xmlSerialization(\n      node.content,\n      inheritedNs,\n      map,\n      requireWellFormed,\n      refs\n    );\n  } else {\n    for (const child of node.childNodes) {\n      markup += xmlSerialization(\n        child,\n        inheritedNs,\n        map,\n        requireWellFormed,\n        refs\n      );\n    }\n  }\n  markup += `</${qualifiedName}>`;\n  return markup;\n}\n\nfunction serializeCDATASection(node) {\n  return `<![CDATA[${node.data}]]>`;\n}\n\n/**\n * @param {{prefixIndex: number}} refs\n */\nfunction xmlSerialization(node, namespace, prefixMap, requireWellFormed, refs) {\n  switch (node.nodeType) {\n    case NODE_TYPES.ELEMENT_NODE:\n      return serializeElement(\n        node,\n        namespace,\n        prefixMap,\n        requireWellFormed,\n        refs\n      );\n    case NODE_TYPES.DOCUMENT_NODE:\n      return serializeDocument(\n        node,\n        namespace,\n        prefixMap,\n        requireWellFormed,\n        refs\n      );\n    case NODE_TYPES.COMMENT_NODE:\n      return serializeComment(node, namespace, prefixMap, requireWellFormed);\n    case NODE_TYPES.TEXT_NODE:\n      return serializeText(node, namespace, prefixMap, requireWellFormed);\n    case NODE_TYPES.DOCUMENT_FRAGMENT_NODE:\n      return serializeDocumentFragment(\n        node,\n        namespace,\n        prefixMap,\n        requireWellFormed,\n        refs\n      );\n    case NODE_TYPES.DOCUMENT_TYPE_NODE:\n      return serializeDocumentType(\n        node,\n        namespace,\n        prefixMap,\n        requireWellFormed\n      );\n    case NODE_TYPES.PROCESSING_INSTRUCTION_NODE:\n      return serializeProcessingInstruction(\n        node,\n        namespace,\n        prefixMap,\n        requireWellFormed\n      );\n    case NODE_TYPES.ATTRIBUTE_NODE:\n      return \"\";\n    case NODE_TYPES.CDATA_SECTION_NODE:\n      return serializeCDATASection(node);\n    default:\n      throw new TypeError(\"Failed to serialize XML: only Nodes can be serialized.\");\n  }\n}\n\nmodule.exports = (root, { requireWellFormed = false } = {}) => {\n  const namespacePrefixMap = Object.create(null);\n  namespacePrefixMap[\"http://www.w3.org/XML/1998/namespace\"] = [\"xml\"];\n  return xmlSerialization(root, null, namespacePrefixMap, requireWellFormed, {\n    prefixIndex: 1\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/w3c-xmlserializer@5.0.0/node_modules/w3c-xmlserializer/lib/serialize.js\n");

/***/ })

};
;